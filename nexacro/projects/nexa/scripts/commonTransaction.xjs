<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript5.0"><![CDATA[/********************************************************************************
공통 트랜잭션관리
@Path          scripts::commonTransaction.xjs
@Description    서비스ID 입력으로 트랜잭션 수행
@Author            김형섭
@Create         
********************************************************************************/



// @Description 각 Form에서 dsService 데이터셋을 이용해 트랜잭션하는 함수
//            dsService 데이터셋에 [serviceID, URL, inData, outData, argument, callbackFunc] 컬럼을 생성하고
//            해당 데이터를 입력하고 사용한다
// @Param      serviceID : 사용할 트랜잭션아이디
//            bAsync : 비동기 트랜잭션 true (default), 동기식 트랜잭션이 필요할 경우 false
// @Usage      this.gfnService("findEmpList"); // 결과값 : findEmpList 트랜잭션를 비동기 방식으로 수행
//            this.gfnService("findCodeName", false); // 결과값 : findCodeName 트랜잭션을 동기 방식으로 수행

this.gfnService = function(serviceID) {
   var serviceRow         = this.dsService.findRow("serviceID", serviceID);       // 트랜잭션ID
   var serviceURL         = this.dsService.getColumn(serviceRow, "URL");          // URL
   var serviceInData      = this.dsService.getColumn(serviceRow, "inData");       // inData 데이터셋
   var serviceOutData      = this.dsService.getColumn(serviceRow, "outData");       // outData 데이터셋
   var serviceArgument      = this.dsService.getColumn(serviceRow, "argument");       // 인자
   var serviceCallbackFunc = this.dsService.getColumn(serviceRow, "callbackFunc");    // 콜백함수명
  

   if (serviceRow < 0) {
      alert("서비스 ID가 없습니다.");
   } else if (typeof serviceURL == "undefined" || serviceURL == "") {
      alert("서비스 URL이 없습니다.");
   }
  
   // 트랜잭션 실행
   this.transaction(
      serviceID,
      serviceURL,
      serviceInData,
      serviceOutData,
      serviceArgument,
      serviceCallbackFunc
      
   );      
  
}

]]></Script>
